{"version":3,"sources":["components/ShowCard.js","components/BottomBar.js","App.js","reportWebVitals.js","index.js"],"names":["ShowCard","props","react_default","a","createElement","Paper","key","show","id","elevation","sx","backgroundColor","padding","width","Stack","alignItems","spacing","Typography","variant","color","title","src","img_link","alt","style","Link","href","imdb_link","underline","target","rel","imdb_score","BottomBar","position","left","bottom","bgcolor","direction","justifyContent","App","_React$useState","React","useState","options","questions","currentQuestion","testStarted","testEnded","currentScores","shows","_React$useState2","Object","slicedToArray","state","setState","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","resQuestions","returnedQuestionsList","resOptions","returnedOptionsList","resShows","returnedShowsList","wrap","_context","prev","next","fetch","sent","json","console","log","objectSpread","stop","apply","this","arguments","fetchQuestionsAndOptions","catch","error","current_question","nextQuestion","event","selectedOption","filter","option","parseInt","value","scores","humor_factor","thriller_factor","romance_factor","drama_factor","horror_factor","family_factor","newCurrentScores","map","score","i","concat","length","Fragment","Container","mt","mb","component","question","number","newShowsList","difference","Math","abs","humor_score","thriller_score","romance_score","drama_score","horror_score","family_score","sort","b","top3","slice","components_ShowCard","renderResults","ButtonGroup","orientation","size","question_num","currentQuestionID","Button","onClick","renderOptions","components_BottomBar","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.47903246.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Paper, Stack, Typography, Link } from '@mui/material';\r\n\r\nfunction ShowCard(props) {\r\n  return (\r\n    <Paper\r\n      key={props.show.id}\r\n      elevation={10}\r\n      sx={{\r\n        backgroundColor: 'rgb(0, 30, 60)',\r\n        padding: 2,\r\n        width: '300px',\r\n      }}\r\n    >\r\n      <Stack alignItems=\"center\" spacing={1}>\r\n        <Typography variant=\"h4\" color=\"white\">\r\n          {props.show.title}\r\n        </Typography>\r\n\r\n        <img\r\n          src={props.show.img_link}\r\n          alt=\"shows cover\"\r\n          style={{ width: '80%' }}\r\n        />\r\n        <Typography variant=\"subtitle1\">\r\n          <Link\r\n            href={props.show.imdb_link}\r\n            underline=\"hover\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer noopener\"\r\n          >\r\n            imdb score: {props.show.imdb_score}\r\n          </Link>\r\n        </Typography>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default ShowCard;\r\n","import React from 'react';\r\nimport { Stack, Typography, Link } from '@mui/material';\r\n\r\nfunction BottomBar() {\r\n  return (\r\n    <Stack\r\n      padding={1}\r\n      position=\"fixed\"\r\n      left=\"0\"\r\n      bottom=\"0\"\r\n      width=\"100vw\"\r\n      bgcolor=\"rgb(0, 30, 60)\"\r\n      direction=\"row\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Typography color=\"white\">\r\n        {' '}\r\n        built by{' '}\r\n        <Link\r\n          href=\"https://github.com/guitrentini96\"\r\n          underline=\"hover\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n          sx={{ color: 'white' }}\r\n        >\r\n          Guilherme Campara\r\n        </Link>{' '}\r\n        :)\r\n      </Typography>\r\n    </Stack>\r\n  );\r\n}\r\n\r\nexport default BottomBar;\r\n","import './App.css';\nimport React from 'react';\nimport ShowCard from './components/ShowCard';\nimport BottomBar from './components/BottomBar';\nimport {\n  Paper,\n  Container,\n  Button,\n  Stack,\n  Typography,\n  Link,\n  ButtonGroup,\n} from '@mui/material';\n\nfunction App() {\n  const [state, setState] = React.useState({\n    options: [],\n    questions: [],\n    currentQuestion: 1,\n    testStarted: false,\n    testEnded: false,\n    currentScores: [5, 5, 5, 5, 5, 5],\n    shows: [],\n  });\n\n  React.useEffect(() => {\n    const fetchQuestionsAndOptions = async () => {\n      const resQuestions = await fetch('http://localhost:8000/api/questions/');\n      const returnedQuestionsList = await resQuestions.json();\n      console.log('these are the questions:');\n      console.log(returnedQuestionsList);\n      const resOptions = await fetch('http://localhost:8000/api/options/');\n      const returnedOptionsList = await resOptions.json();\n      console.log('these are the options:');\n      console.log(returnedOptionsList);\n      const resShows = await fetch('http://localhost:8000/api/shows/');\n      const returnedShowsList = await resShows.json();\n      console.log('these are the shows:');\n      console.log(returnedShowsList);\n\n      setState({\n        ...state,\n        questions: returnedQuestionsList,\n        options: returnedOptionsList,\n        shows: returnedShowsList,\n      });\n    };\n    fetchQuestionsAndOptions().catch(console.error);\n  }, []);\n\n  const renderQuestion = (current_question) => {\n    console.log(\n      `rendering the next question. the current scores are ${state.currentScores}`\n    );\n    const filteredQuestions = state.questions.filter((question) => {\n      return parseInt(question.number) === current_question;\n    });\n    // if (filteredQuestions.length > 0) {\n    return filteredQuestions[0].title;\n    // } else {\n    //   setState({ ...state, testEnded: true });\n    // }\n  };\n\n  const nextQuestion = (event) => {\n    // gets the selected option object\n    const selectedOption = state.options.filter(\n      (option) => option.id === parseInt(event.target.value)\n    )[0];\n    // set a scores array with all the scores\n    const scores = [\n      selectedOption.humor_factor,\n      selectedOption.thriller_factor,\n      selectedOption.romance_factor,\n      selectedOption.drama_factor,\n      selectedOption.horror_factor,\n      selectedOption.family_factor,\n    ];\n\n    const newCurrentScores = state.currentScores.map(function(score, i) {\n      if (score + scores[i] < 0) {\n        return 0;\n      } else if (score + scores[i] > 10) {\n        return 10;\n      } else {\n        return score + scores[i];\n      }\n    });\n\n    console.log(`selected the option with id ${event.target.value}`);\n\n    state.questions.length === state.currentQuestion\n      ? setState({\n          ...state,\n          testEnded: true,\n          currentScores: newCurrentScores,\n        })\n      : setState({\n          ...state,\n          currentQuestion: state.currentQuestion + 1,\n          currentScores: newCurrentScores,\n        });\n  };\n\n  const renderOptions = (question_num) => {\n    const currentQuestionID = state.questions.filter(\n      (question) => question.number === question_num\n    )[0].id;\n    const filteredOptions = state.options.filter(\n      (option) => option.question === currentQuestionID\n    );\n    const mappedOptions = filteredOptions.map((option) => (\n      <Button value={option.id} key={option.id} onClick={nextQuestion}>\n        {option.title}\n      </Button>\n    ));\n    return mappedOptions;\n  };\n\n  const renderResults = () => {\n    // adds a difference key to all shows in a new array\n    const newShowsList = state.shows.map(function(show) {\n      const difference =\n        Math.abs(show.humor_score - state.currentScores[0]) +\n        Math.abs(show.thriller_score - state.currentScores[1]) +\n        Math.abs(show.romance_score - state.currentScores[2]) +\n        Math.abs(show.drama_score - state.currentScores[3]) +\n        Math.abs(show.horror_score - state.currentScores[4]) +\n        Math.abs(show.family_score - state.currentScores[5]);\n      show.difference = difference;\n      return show;\n    });\n\n    function compare_differences(a, b) {\n      if (a.difference < b.difference) {\n        return -1;\n      }\n      if (a.difference > b.difference) {\n        return 1;\n      }\n      return 0;\n    }\n    // sorts then by the least difference from the overall scores\n    newShowsList.sort(compare_differences);\n\n    console.log('after sorted, the new list looks like this:');\n    console.log(newShowsList);\n\n    const top3 = newShowsList.slice(0, 3);\n    console.log('the top 3 are:');\n    console.log(top3);\n\n    const top3banner = top3.map(function(show, i) {\n      return (\n        <>\n          <ShowCard show={show} />\n        </>\n      );\n    });\n\n    return top3banner;\n  };\n\n  const renderRetryButton = () => {\n    const retryButton = (\n      <Button\n        variant=\"outlined\"\n        onClick={() =>\n          setState({\n            ...state,\n            currentQuestion: 1,\n            testStarted: false,\n            testEnded: false,\n            currentScores: [5, 5, 5, 5, 5, 5],\n          })\n        }\n      >\n        Try again\n      </Button>\n    );\n    return retryButton;\n  };\n\n  return (\n    <>\n      <Container>\n        <Stack\n          mt={2}\n          mb={8}\n          alignItems=\"center\"\n          spacing={5}\n          justifyContent=\"center\"\n        >\n          {/* if the test hasn't started, renders a welcome message, otherwise renders the question or the results */}\n          <Typography variant=\"h3\" component=\"h1\">\n            {state.testStarted\n              ? state.testEnded\n                ? 'Here are your results :'\n                : renderQuestion(state.currentQuestion)\n              : \"Welcome to this TV-show picker, let's start the test !\"}\n          </Typography>\n\n          {/* renders a start button if the test has not started, otherwise it renders the current options or the results */}\n          {state.testStarted ? (\n            state.testEnded ? (\n              <Stack\n                spacing={2}\n                sx={{\n                  justifyContent: 'center',\n                }}\n              >\n                {renderResults()}\n              </Stack>\n            ) : (\n              <ButtonGroup orientation=\"vertical\" size=\"large\">\n                {renderOptions(state.currentQuestion)}\n              </ButtonGroup>\n            )\n          ) : (\n            <Button\n              variant=\"contained\"\n              onClick={() => setState({ ...state, testStarted: true })}\n            >\n              start\n            </Button>\n          )}\n          {state.testEnded ? renderRetryButton() : ''}\n        </Stack>\n        <BottomBar />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}